rv2[i] = smr$coefficients[1,1]
wvl = temp$Wavelength[r1]*(1 + obsrv/299792458)
diff = flx - spline(temp$Wavelength[r1],
temp$Flux[r1] - as.numeric(estspec[,i]),
method='fmm', xout=wvl)$y
smr = summary(lm(diff ~ 0 + hgvar))
rv3[i] = smr$coefficients[1,1]
diff2 = flx - spline(temp$Wavelength[r1], temp$Flux[r1],
method='fmm', xout=wvl)$y
smr = summary(lm(diff2 ~ 0 + hgvar))
rv4[i] = smr$coefficients[1,1]
}
#For each cadence, is the difference in estimated RV approximately
#20? (Note: 10 - (-10) = 20) In other words, does the cadence and
#nonparametric smoothing not affect estimates of the relative RV?
hist(rv1 - rv3 - 20, main = "Estimated Template")
hist(rv2 - rv4 - 20, main="True Template")
#standard deviation across different cadences
sd(rv1, na.rm=T)
sd(rv2, na.rm=T)
sd(rv3, na.rm=T)
sd(rv4, na.rm=T)
0 %in% c(0,1,2,3,4,5)
0 %in% c(1,2,3,4,5)
output = list(a = 3, b=4)
output$a
knitr::opts_chunk$set(echo = TRUE)
polynomial(1, c(1,-12,47,-60), c(4,3,2,1))
polynomial = function(x, coefs, degrees){
assertthat::are_equal(len(coefs), len(degrees))
value = sum(sapply(1:length(coefs),
function(i) coefs[i]*x^(degrees[i])))
if (0 %in% degrees){
j = which(degrees == 0)
degrees = degrees[-j]
coefs = coefs[-j]
}
deriv = sum(sapply(1:length(coefs),
function(i) coefs[i]*degrees[i]*x^(degrees[i]-1)))
return(list(val = value, deriv = deriv))
}
polynomial(1, c(1,-12,47,-60), c(4,3,2,1))
polynomial = function(x, coefs, degrees){
assertthat::are_equal(len(coefs), length(degrees))
value = sum(sapply(1:length(coefs),
function(i) coefs[i]*x^(degrees[i])))
if (0 %in% degrees){
j = which(degrees == 0)
degrees = degrees[-j]
coefs = coefs[-j]
}
deriv = sum(sapply(1:length(coefs),
function(i) coefs[i]*degrees[i]*x^(degrees[i]-1)))
return(list(val = value, deriv = deriv))
}
polynomial(1, c(1,-12,47,-60), c(4,3,2,1))
polynomial = function(x, coefs, degrees){
assertthat::are_equal(length(coefs), length(degrees))
value = sum(sapply(1:length(coefs),
function(i) coefs[i]*x^(degrees[i])))
if (0 %in% degrees){
j = which(degrees == 0)
degrees = degrees[-j]
coefs = coefs[-j]
}
deriv = sum(sapply(1:length(coefs),
function(i) coefs[i]*degrees[i]*x^(degrees[i]-1)))
return(list(val = value, deriv = deriv))
}
polynomial(1, c(1,-12,47,-60), c(4,3,2,1))
1-12+47-60
polynomial = function(x, coefs, degrees){
assertthat::are_equal(length(coefs), length(degrees))
value = sum(sapply(1:length(coefs),
function(i) coefs[i]*x^(degrees[i])))
if (0 %in% degrees){
j = which(degrees == 0)
degrees = degrees[-j]
coefs = coefs[-j]
}
deriv = sum(sapply(1:length(coefs),
function(i) coefs[i]*degrees[i]*x^(degrees[i]-1)))
return(list(val = value, deriv = deriv))
}
polynomial(0, c(1,-12,47,-60), c(4,3,2,1))
polynomial = function(x, coefs, degrees){
assertthat::are_equal(length(coefs), length(degrees))
value = sum(sapply(1:length(coefs),
function(i) coefs[i]*x^(degrees[i])))
if (0 %in% degrees){
j = which(degrees == 0)
degrees = degrees[-j]
coefs = coefs[-j]
}
deriv = sum(sapply(1:length(coefs),
function(i) coefs[i]*degrees[i]*x^(degrees[i]-1)))
return(list(val = value, deriv = deriv))
}
x0 = 0
roots = c(0)
for(i in 1:10){
p = polynomial(x0, c(1,-12,47,-60), c(4,3,2,1))
x0 = x0 - p$val/(p$deriv - p$val*sum(1/(x0 - roots)))
}
print(roots)
x0 = 10
roots = c(0)
for(i in 1:10){
p = polynomial(x0, c(1,-12,47,-60), c(4,3,2,1))
x0 = x0 - p$val/(p$deriv - p$val*sum(1/(x0 - roots)))
}
print(roots)
x0 = 10
roots = c(0)
for(i in 1:10){
p = polynomial(x0, c(1,-12,47,-60), c(4,3,2,1))
x0 = x0 - p$val/(p$deriv - p$val*sum(1/(x0 - roots)))
}
roots = c(roots, x0)
print(roots)
x0 = 0
roots = c(0)
for(i in 1:10){
p = polynomial(x0, c(1,-12,47,-60), c(4,3,2,1))
x0 = x0 - p$val/(p$deriv - p$val*sum(1/(x0 - roots)))
}
roots = c(roots, x0)
print(roots)
x0 = 0
roots = c(0)
p = polynomial(x0, c(1,-12,47,-60), c(4,3,2,1))
x0 = x0 - p$val/(p$deriv - p$val*sum(1/(x0 - roots)))
x0
p$deriv
x0 = 0
roots = c(0)
if(x0 %in% roots){x0 = min(roots)-1}
for(i in 1:10){
p = polynomial(x0, c(1,-12,47,-60), c(4,3,2,1))
x0 = x0 - p$val/(p$deriv - p$val*sum(1/(x0 - roots)))
}
roots = c(roots, x0)
print(roots)
roots = c(0)
while(length(roots) <= 4){
x0 = 0
if(x0 %in% roots){x0 = min(roots)-1}
for(i in 1:10){
p = polynomial(x0, c(1,-12,47,-60), c(4,3,2,1))
x0 = x0 - p$val/(p$deriv - p$val*sum(1/(x0 - roots)))
}
roots = c(roots, x0)
}
print(roots)
roots = c(0)
while(length(roots) < 4){
x0 = 0
if(x0 %in% roots){x0 = min(roots)-1}
for(i in 1:10){
p = polynomial(x0, c(1,-12,47,-60), c(4,3,2,1))
x0 = x0 - p$val/(p$deriv - p$val*sum(1/(x0 - roots)))
}
roots = c(roots, x0)
}
print(roots)
coefs = c(1,-12,47,-60)
degs = c(4,3,2,1)
roots = c(0)
while(length(roots) < length(degs)){
x0 = runif(1, min(roots)-1, max(roots)+1)
if(x0 %in% roots){x0 = min(roots)-1}
for(i in 1:10){
p = polynomial(x0, coefs, degs)
x0 = x0 - p$val/(p$deriv - p$val*sum(1/(x0 - roots)))
}
roots = c(roots, x0)
}
print(roots)
coefs = c(1,1)#c(1,-12,47,-60)
degs = c(2,0)#c(4,3,2,1)
roots = c(0)
while(length(roots) < length(degs)){
x0 = runif(1, min(roots)-1, max(roots)+1)
if(x0 %in% roots){x0 = min(roots)-1}
for(i in 1:10){
p = polynomial(x0, coefs, degs)
x0 = x0 - p$val/(p$deriv - p$val*sum(1/(x0 - roots)))
}
roots = c(roots, x0)
}
print(roots)
coefs = c(1,1)#c(1,-12,47,-60)
degs = c(3,1)#c(4,3,2,1)
roots = c(0)
while(length(roots) < length(degs)){
x0 = runif(1, min(roots)-1, max(roots)+1)
if(x0 %in% roots){x0 = min(roots)-1}
print(x0)
for(i in 1:10){
p = polynomial(x0, coefs, degs)
x0 = x0 - p$val/(p$deriv - p$val*sum(1/(x0 - roots)))
print(x0)
}
roots = c(roots, x0)
}
#print(roots)
coefs = c(1,1)#c(1,-12,47,-60)
degs = c(3,1)#c(4,3,2,1)
roots = c(0)
while(length(roots) < length(degs)){
x0 = runif(1, min(roots)-1, max(roots)+1)
if(x0 %in% roots){x0 = min(roots)-1}
print(x0)
xs = rep(NA, 50)
for(i in 1:50){
p = polynomial(x0, coefs, degs)
xnew = x0 - p$val/(p$deriv - p$val*sum(1/(x0 - roots)))
x0 = xnew
print(x0)
}
if(sd(xs[1:25]) > sd(xs[26:50])){
roots = c(roots, x0)
}else{
break
}
}
coefs = c(1,1)#c(1,-12,47,-60)
degs = c(3,1)#c(4,3,2,1)
roots = c(0)
while(length(roots) < length(degs)){
x0 = runif(1, min(roots)-1, max(roots)+1)
if(x0 %in% roots){x0 = min(roots)-1}
print(x0)
xs = c(x0, rep(NA, 49))
for(i in 1:50){
xs[i] = x0
p = polynomial(x0, coefs, degs)
xnew = x0 - p$val/(p$deriv - p$val*sum(1/(x0 - roots)))
x0 = xnew
#print(x0)
}
if(sd(xs[1:25]) > 2*sd(xs[26:50])){
roots = c(roots, x0)
}else{
break
}
}
#print(roots)
coefs = c(1,1)#c(1,-12,47,-60)
degs = c(3,1)#c(4,3,2,1)
roots = c(0)
while(length(roots) < length(degs)){
x0 = runif(1, min(roots)-1, max(roots)+1)
if(x0 %in% roots){x0 = min(roots)-1}
#print(x0)
xs = c(x0, rep(NA, 49))
for(i in 1:50){
xs[i] = x0
p = polynomial(x0, coefs, degs)
xnew = x0 - p$val/(p$deriv - p$val*sum(1/(x0 - roots)))
x0 = xnew
#print(x0)
}
if(sd(xs[1:25]) > 2*sd(xs[26:50])){
roots = c(roots, x0)
}else{
break
}
}
print(roots)
coefs = c(1,-12,47,-60)
degs = c(4,3,2,1)
roots = c(0)
while(length(roots) < length(degs)){
x0 = runif(1, min(roots)-1, max(roots)+1)
if(x0 %in% roots){x0 = min(roots)-1}
#print(x0)
xs = c(x0, rep(NA, 49))
for(i in 1:50){
xs[i] = x0
p = polynomial(x0, coefs, degs)
xnew = x0 - p$val/(p$deriv - p$val*sum(1/(x0 - roots)))
x0 = xnew
#print(x0)
}
if(sd(xs[1:25]) > 2*sd(xs[26:50])){
roots = c(roots, x0)
}else{
break
}
}
print(roots)
coefs = c(1,-12,47,-60)
degs = c(4,3,2,1)
roots = c(0)
while(length(roots) < max(degs)){
x0 = runif(1, min(roots)-1, max(roots)+1)
if(x0 %in% roots){x0 = min(roots)-1}
#print(x0)
xs = c(x0, rep(NA, 49))
for(i in 1:50){
xs[i] = x0
p = polynomial(x0, coefs, degs)
xnew = x0 - p$val/(p$deriv - p$val*sum(1/(x0 - roots)))
x0 = xnew
#print(x0)
}
if(sd(xs[1:25]) > 2*sd(xs[26:50])){
roots = c(roots, x0)
}else{
break
}
}
print(roots)
coefs = c(1,2,1)#c(1,-12,47,-60)
degs = c(3,2,1)#c(4,3,2,1)
roots = c(0)
while(length(roots) < max(degs)){
x0 = runif(1, min(roots)-1, max(roots)+1)
if(x0 %in% roots){x0 = min(roots)-1}
print(x0)
xs = c(x0, rep(NA, 49))
for(i in 1:50){
xs[i] = x0
p = polynomial(x0, coefs, degs)
xnew = x0 - p$val/(p$deriv - p$val*sum(1/(x0 - roots)))
x0 = xnew
print(x0)
}
if(sd(xs[1:25]) > 2*sd(xs[26:50])){
roots = c(roots, x0)
}else{
break
}
}
print(roots)
coefs = c(1,2,3,4,-10,12)#c(1,-12,47,-60)
degs = c(6,5,4,3,2,1)#c(4,3,2,1)
roots = c(0)
while(length(roots) < max(degs)){
x0 = runif(1, min(roots)-1, max(roots)+1)
if(x0 %in% roots){x0 = min(roots)-1}
xs = c(x0, rep(NA, 49))
for(i in 1:50){
xs[i] = x0
p = polynomial(x0, coefs, degs)
xnew = x0 - p$val/(p$deriv - p$val*sum(1/(x0 - roots)))
x0 = xnew
}
if(sd(xs[1:25]) > 2*sd(xs[26:50])){
roots = c(roots, x0)
}else{
break
}
}
print(roots)
coefs = c(1,2,-13,4,-10,12)#c(1,-12,47,-60)
degs = c(6,5,4,3,2,1)#c(4,3,2,1)
roots = c(0)
while(length(roots) < max(degs)){
x0 = runif(1, min(roots)-1, max(roots)+1)
if(x0 %in% roots){x0 = min(roots)-1}
xs = c(x0, rep(NA, 49))
for(i in 1:50){
xs[i] = x0
p = polynomial(x0, coefs, degs)
xnew = x0 - p$val/(p$deriv - p$val*sum(1/(x0 - roots)))
x0 = xnew
}
if(sd(xs[1:25]) > 2*sd(xs[26:50])){
roots = c(roots, x0)
}else{
break
}
}
print(roots)
?uniroot
uniroot(polynomial(x, c(1,2,-13,4,-10,12), c(6,5,4,3,2,1)), c(-10,10))
thispoly = function(x){polynomial(x, c(1,2,-13,4,-10,12), c(6,5,4,3,2,1))}
uniroot(thispoly, c(-10,10))
uniroot(polynomial, c(-5,5), coefs=c(1,2,-13,4,-10,12), degrees=c(6,5,4,3,2,1))
thispoly = function(x){polynomial(x, c(1,2,-13,4,-10,12), c(6,5,4,3,2,1))$val}
uniroot(thispoly, c(-10,10))
uniroot(thispoly, c(-10,0.5))
uniroot(thispoly, c(-1,0.5))
uniroot(thispoly, c(-1,0.5))$root
uniroot(thispoly, c(-0.5,0.5))$root
uniroot(thispoly, c(0.5,1))$root
uniroot(thispoly, c(1,3))$root
uniroot(thispoly, c(-10,-1))$root
newtmeth_poly = function(coefs, degrees, knownroot, niters=50){
roots = c(knownroot)
while(length(roots) < max(degrees)){
x0 = runif(1, min(roots)-1, max(roots)+1)
if(x0 %in% roots){x0 = min(roots)-1}
xs = c(x0, rep(NA, niters-1))
for(i in 1:niters){
xs[i] = x0
p = polynomial(x0, coefs, degrees)
xnew = x0 - p$val/(p$deriv - p$val*sum(1/(x0 - roots)))
x0 = xnew
}
if(sd(xs[1:as.integer(niters/2)]) > 2*sd(xs[(as.integer(niters/2)+1):niters])){
roots = c(roots, x0)
}else{
break
}
}
return(roots)
}
newtmeth_poly(c(1,-12,47,-60), c(4,3,2,1), 0)
seq(-10,10,0.5)
seq(-10.5,10,5,1)
seq(-10.5,10.5,1)
roots = c(0)
thispoly = function(x){polynomial(x,c(1,-12,47,-60), c(4,3,2,1))$val}
for (l in seq(-10.5, 10.5,1)) {
if(thispoly(l)*thispoly(l+1) < 0){
roots = c(roots, uniroot(thispoly, c(l,l+1))$root)
}
}
print(roots)
roots = c()
thispoly = function(x){polynomial(x,c(1,-12,47,-60), c(4,3,2,1))$val}
for (l in seq(-10.5, 10.5,1)) {
if(thispoly(l)*thispoly(l+1) < 0){
roots = c(roots, uniroot(thispoly, c(l,l+1))$root)
}
}
print(roots)
roots = c()
thispoly = function(x){polynomial(x,c(1,-12,47,-60), c(4,3,2,1))$val}
for (l in seq(-10.5, 10.5,1)) {
if(thispoly(l)*thispoly(l+1) < 0){
roots = c(roots, uniroot(thispoly, c(l,l+1))$root)
}
}
print(round(roots, digits = 4))
homogen_poisson = function(lambda, time){
arrtimes = c()
t=0
while (TRUE) {
t = t - log(runif(1))/lambda
if(t < time){
arrtimes = c(arrtimes, t)
}else{
break
}
}
return(arrtimes)
}
homogen_poisson(1,10)
ts = homogen_poisson(1,10)
abline(v=ts)
ts = homogen_poisson(1,10)
plot(c(), c(), xlim = c(0,10), ylim = c(0,1))
abline(v=ts)
ts = homogen_poisson(1,10)
plot(c(), c(), xlim = c(0,10), ylim = c(0,1), xlab = "Time",
ylab = "")
abline(v=ts, lty=2)
ts = homogen_poisson(1,10)
plot(c(), c(), xlim = c(0,10), ylim = c(0,1),
xlab = "Arrival Time",
ylab = "")
abline(v=ts)
ts = homogen_poisson(3,10)
plot(c(), c(), xlim = c(0,10), ylim = c(0,1),
xlab = "Arrival Time",
ylab = "")
abline(v=ts)
ts = homogen_poisson(100,10)
plot(c(), c(), xlim = c(0,10), ylim = c(0,1),
xlab = "Arrival Time",
ylab = "")
abline(v=ts)
ts = homogen_poisson(50,10)
plot(c(), c(), xlim = c(0,10), ylim = c(0,1),
xlab = "Arrival Time",
ylab = "")
abline(v=ts)
ts = homogen_poisson(3,10)
plot(c(), c(), xlim = c(0,10), ylim = c(0,1),
xlab = "Arrival Time",
ylab = "")
abline(v=ts)
ts = homogen_poisson(3,10)
plot(c(), c(), xlim = c(0,10), ylim = c(0,1),
xlab = "Arrival Time",
ylab = "")
abline(v=ts)
ts = homogen_poisson(1,10)
plot(c(), c(), xlim = c(0,10), ylim = c(0,1),
xlab = "Arrival Time",
ylab = "")
abline(v=ts)
ts = homogen_poisson(1,10)
plot(c(), c(), xlim = c(0,10), ylim = c(0,1),
xlab = "Arrival Time",
ylab = "")
abline(v=ts)
lambdahats = sapply(1:1000, function(i) length(homogen_poisson(1,10))/10)
hist(lambdahats)
lambdahats = sapply(1:1000, function(i) length(homogen_poisson(1,10))/10)
hist(lambdahats, main = "Estimated Rate")
lambdahats = sapply(1:1000, function(i) length(homogen_poisson(1,10))/10)
hist(lambdahats, main = "Estimated Rate")
print(paste0("Mean of estimates: ", mean(lambdahats)))
ppsim = sapply(1:1000, function(i) homogen_poisson(1,10))
lambdahats = sapply(ppsim, function(i) length(i)/10)
hist(lambdahats, main = "Estimated Rate")
print(paste0("Mean of estimates: ", mean(lambdahats)))
